		<Context 
			path="" 
			docBase="golf-statistics"
			reloadable="false" 
			crossContext="false">
			
			<!-- JDBC data source definition -->
			<Resource 
  				name="jdbc/golf-statistics" 
  				auth="Container" 
  				type="javax.sql.DataSource" />
			<ResourceParams name="jdbc/golf-statistics">
				<parameter>
					<name>factory</name>
					<value>org.apache.commons.dbcp.BasicDataSourceFactory</value>
				</parameter>

				<!-- 	Don't set this any higher than max_connections on your
					MySQL server, usually this should be a 10 or a few 10's
					of connections, not hundreds or thousands -->
				<parameter>
					<name>maxActive</name>
					<value>10</value>
				</parameter>

				<!-- 	You don't want to many idle connections hanging around
					if you can avoid it, only enough to soak up a spike in
					the load -->
				<parameter>
					<name>maxIdle</name>
					<value>5</value>
				</parameter>

				<!-- 	Don't use autoReconnect=true, it's going away eventually
					and it's a crutch for older connection pools that couldn't
					test connections. You need to decide whether your application
					is supposed to deal with SQLExceptions (hint, it should), and
					how much of a performance penalty you're willing to pay
					to ensure 'freshness' of the connection -->
				<parameter>
					<name>validationQuery</name>
					<value>SELECT 1</value>
				</parameter>

				<!--	The most conservative approach is to test connections
					before they're given to your application. For most applications
					this is okay, the query used above is very small and takes
					no real server resources to process, other than the time used
					to traverse the network.
					If you have a high-load application you'll need to rely on
					something else. -->
				<parameter>
					<name>testOnBorrow</name>
					<value>true</value>
				</parameter>

				<!--	Otherwise, or in addition to testOnBorrow, you can test
					while connections are sitting idle -->
				<parameter>
					<name>testWhileIdle</name>
					<value>true</value>
				</parameter>

				<!-- 	You have to set this value, otherwise even though
					you've asked connections to be tested while idle,
					the idle evicter thread will never run -->
				<parameter>
					<name>timeBetweenEvictionRunsMillis</name>
					<value>10000</value>
				</parameter>
		
				<!--	Don't allow connections to hang out idle too long,
					never longer than what wait_timeout is set to on the
					server...A few minutes or even fraction of a minute
					is sometimes okay here, it depends on your application
					and how much spikey load it will see -->
				<parameter>
					<name>minEvictableIdleTimeMillis</name>
					<value>60000</value>
				</parameter>

				<!-- Username and password used when connecting to MySQL -->
				<parameter>
					<name>username</name>
					<value>hgs_golf_user</value>
				</parameter>
				<parameter>
					<name>password</name>
					<value>g01fu53r</value>
				</parameter>

				<!-- Class name for the Connector/J driver -->
				<parameter>
					<name>driverClassName</name>
					<value>com.mysql.jdbc.Driver</value>
				</parameter>

				<!-- 	The JDBC connection url for connecting to MySQL, notice
					that if you want to pass any other MySQL-specific parameters
					you should pass them here in the URL, setting them using the
					parameter tags above will have no effect, you will also
					need to use &amp; to separate parameter values as the
					ampersand is a reserved character in XML -->
				<parameter>
					<name>url</name>
					<value>jdbc:mysql://localhost:3306/golf_statistics_production</value>
				</parameter>
			</ResourceParams>

			<!-- Java mail session definition -->
			<Resource 
				name="mail/Session" 
				auth="Container"
				type="javax.mail.Session"/>
  			<ResourceParams name="mail/Session"> <!-- Java mail resource parameters -->
    				<parameter>
      				<name>mail.smtp.host</name>
					<value>localhost</value>
				</parameter>
			</ResourceParams>

			<Realm
				className="org.apache.catalina.realm.DataSourceRealm"
				digest="MD5"
				dataSourceName="jdbc/golf-statistics"
				localDataSource="true"
				userRoleTable="user_roles"
				roleNameCol="role_name"
				userTable="player"
				userCredCol="passwd"
				userNameCol="user_id" />
		</Context>