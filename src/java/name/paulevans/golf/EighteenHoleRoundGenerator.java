package name.paulevans.golf;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import name.paulevans.golf.dao.ScorecardSummaryDAO;

/**
 * Engine used to generate 18-hole rounds as 9-hole rounds are added to it.
 * @author pevans
 *
 */
public class EighteenHoleRoundGenerator {
	
	private List<ScorecardSummaryDAO> rounds;
	private List<ScorecardSummaryDAO> eighteenHoleRounds;
	
	/**
	 * Public constructor
	 * @param aHomeCourseId
	 */
	public EighteenHoleRoundGenerator() {
		rounds = new ArrayList<ScorecardSummaryDAO>();
		eighteenHoleRounds = new ArrayList<ScorecardSummaryDAO>();
	}
	
	/*private void printrounds() {
		ScorecardSummaryDAO dao;
		for (int i = 0; i < eighteenHoleRounds.size(); i++) {
			dao = eighteenHoleRounds.get(i);
			System.out.print("dao[" + i + "].getType(): " + dao.getScoreType());
			System.out.print(", dao[" + i + "].getScore(): " + dao.getScore());
			System.out.println(", dao[" + i + "].getDate(): " + dao.getDatePlayed());
		}
	}*/
	
	/**
	 * Returns the collection of 18-hole rounds generated by this engine
	 * @return
	 */
	public ScorecardSummaryDAO[] getRounds(int aMaxRounds) {
		
		// merge the remaing rounds...
		mergeRounds(); 
		
		// sort the rounds by date...
		Collections.sort(eighteenHoleRounds, 
				new Comparator<ScorecardSummaryDAO>() {
			/**
			 * Returns aDAO2.getDatePlayed().compareTo(aDAO1.getDatePlayed())
			 * @param aDAO1
			 * @param aDAO2
			 * @return
			 */
			public int compare(ScorecardSummaryDAO aDAO1, 
					ScorecardSummaryDAO aDAO2) {
				return aDAO2.getDatePlayed().compareTo(aDAO1.getDatePlayed());
			}
		});
		
		// remove the excess rounds...
		while (eighteenHoleRounds.size() > aMaxRounds) {
			eighteenHoleRounds.remove(aMaxRounds);
		}
		
		// return the rounds...
		return eighteenHoleRounds.toArray(
				new ScorecardSummaryDAO[eighteenHoleRounds.size()]);
	}
	
	/**
	 * Merges the remaining 9-hole rounds into 18-hole rounds.  If the number
	 * of remaining 9-hole rounds is odd, the oldest one is discarded.
	 *
	 */
	private void mergeRounds() {
		
		ScorecardSummaryDAO round1, round2;
		
		while (rounds.size() > 0) {
			round1 = rounds.remove(0);
			if (rounds.size() > 0) {
				round2 = rounds.remove(0);
				mergeRounds(round1, round2);
			}
		}
	}
	
	/**
	 * Processes a new 9-hole round; if aRound is a home-course round, it is
	 * attempted to be merged with an existing home-course round.
	 * @param aRound
	 */
	public void processRound(ScorecardSummaryDAO aRound) {
		
		ScorecardSummaryDAO homeRound;
		
		// discard rounds that don't have the slope/rating set...
		if (((aRound.getSlope() != null) && aRound.getSlope() > 0) && 
			((aRound.getRating() != null) && aRound.getRating() > 0)) {
			if (aRound.isNineHoleRound()) {
				// try to merge 9-hole home-rounds with other 9-hole home
				// rounds first...
				if (aRound.getScoreType().equals(Constants.HOME_SCORE_TYPE)) {
					homeRound = removeHomeRound();
					if (homeRound != null) {
						mergeRounds(aRound, homeRound);
					} else {
						rounds.add(aRound);
					}
				} else {
					rounds.add(aRound);
				}
			} else {
				// no merge necessary; aRound is an 18-hole round...
				eighteenHoleRounds.add(aRound); 
			}
		}
	}
	
	/**
	 * Merges the two 9-hole rounds, aRound1 and aRound2 into an 18-hole round
	 * and puts it into the eighteenHoleRounds list.
	 * @param aRound1
	 * @param aRound2
	 */
	private void mergeRounds(ScorecardSummaryDAO aRound1, 
			ScorecardSummaryDAO aRound2) {
		
		ScorecardSummaryDAO eighteenHoleRound;
		BigDecimal averageSlope;
		
		// the 18-hole round is created by merging two 9-hole rounds
		// as specified by the USGA rule, 5.2d, of the Handicap System Manual
		eighteenHoleRound = BeanFactory.newScorecardSummaryDAO();
		eighteenHoleRound.setScore(aRound1.getScore() + aRound2.getScore());
		eighteenHoleRound.setRating(BigDecimal.valueOf(aRound1.getRating() + 
				aRound2.getRating()).setScale(1, 
						BigDecimal.ROUND_HALF_UP).floatValue());
		averageSlope = new BigDecimal((double)
				(aRound1.getSlope() + aRound2.getSlope()) / 2);
		eighteenHoleRound.setSlope(
				averageSlope.setScale(0, 
						BigDecimal.ROUND_HALF_UP).toBigInteger().intValue());
		eighteenHoleRound.setScoreType(Constants.COMBINED_SCORE_TYPE);
		// assign the date to that of the most-recent 9-hole round...
		eighteenHoleRound.setDatePlayed(aRound1.getDatePlayed().getTime() < 
				aRound2.getDatePlayed().getTime() ? aRound1.getDatePlayed() : 
					aRound2.getDatePlayed());
		eighteenHoleRound.setCourseId(aRound2.getCourseId());
		eighteenHoleRound.setCourseName(aRound2.getCourseName());
		eighteenHoleRounds.add(eighteenHoleRound);
	}
	
	/**
	 * Removes from the "rounds" list the first encountered home-course round.  
	 * If no home-course rounds exist within the "rounds" list, null is 
	 * returned. 
	 * @return
	 */
	private ScorecardSummaryDAO removeHomeRound() {
		
		int loop, numRounds;
		ScorecardSummaryDAO round;
		
		numRounds = rounds.size();
		for (loop = 0; loop < numRounds; loop++) {
			round = rounds.get(loop);
			if (round.getScoreType().equals(Constants.HOME_SCORE_TYPE)) {
				rounds.remove(loop);
				return round;
			}
		}
		return null;
	}
}
